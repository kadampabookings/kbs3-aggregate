# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven
#
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Prod | Build and Deploy to AWS

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      jdk-version: '19'
      branch: 'prod'

    environment: ${{ github.ref == 'refs/heads/main' && 'production' }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 19
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 19
      - name: Checkout ${{ env.branch }} on all submodules
        run: |
          git submodule update --init
          cd kbsx && git checkout ${{ env.branch }} && cd ..
          cd kbs3 && git checkout ${{ env.branch }} && cd ..
          cd modality-fork && git checkout ${{ env.branch }} && cd ..
          cd webfx-extras-fork && git checkout ${{ env.branch }} && cd ..
          cd webfx-fork && git checkout ${{ env.branch }} && cd ..
          cd webfx-platform-fork && git checkout ${{ env.branch }} && cd ..
          cd webfx-stack-fork && git checkout ${{ env.branch }} && cd ..
          cd webfx-parent-fork && git checkout ${{ env.branch }} && cd ..
          cd webfx-stack-parent-fork && git checkout ${{ env.branch }} && cd ..
          cd webfx-lib-javacupruntime-fork && git checkout ${{ env.branch }} && cd ..

      - name: Injecting variables & secrets into front-office config
        env:
          FRONTOFFICE_ORIGIN: ${{ vars.FRONTOFFICE_ORIGIN }}
          GOOGLE_MAP_JS_API_KEY: ${{ secrets.GOOGLE_MAP_JS_API_KEY }}
        run: |
          conf_file=kbs3/kbs-frontoffice-application-gwt/src/main/resources/dev/webfx/platform/conf/src-root.properties
          echo "FRONTOFFICE_ORIGIN=$FRONTOFFICE_ORIGIN" >> $conf_file
          echo "GOOGLE_MAP_JS_API_KEY=$GOOGLE_MAP_JS_API_KEY" >> $conf_file

      - name: Injecting variables into back-office config
        env:
          BACKOFFICE_ORIGIN: ${{ vars.BACKOFFICE_ORIGIN }}
        run: |
          conf_file=kbs3/kbs-backoffice-application-gwt/src/main/resources/dev/webfx/platform/conf/src-root.properties
          echo "BACKOFFICE_ORIGIN=$BACKOFFICE_ORIGIN" >> $conf_file

      - name: Install jq
        run: sudo apt install jq

      - name: Installing local parents (to ensure not using the Central ones)
        run: |
          cd webfx-parent-fork && mvn install -B --no-transfer-progress && cd ..
          cd webfx-stack-parent-fork && mvn install -B --no-transfer-progress && cd ..

      #- name: Running webfx-update
      #  run: mvn webfx:update --no-transfer-progress

      - name: Build with Maven
        run: mvn package -P 'production,vertx-fatjar,gwt-compile,gwt-sourcemaps' -am -pl kbs3/kbs-server-application-vertx,kbs3/kbs-backoffice-application-gwt,kbs3/kbs-frontoffice-application-gwt -B --no-transfer-progress

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
      - name: Build, tag, and push image to Amazon ECR
        env:
          SERVER_FAT_JAR: "kbs3/kbs-server-application-vertx/target/kbs-server-application-vertx-1.0.0-SNAPSHOT-fat.jar"
          BACK_OFFICE_WAR: "kbs3/kbs-backoffice-application-gwt/target/kbs-backoffice-application-gwt-1.0.0-SNAPSHOT.war"
          FRONT_OFFICE_WAR: "kbs3/kbs-frontoffice-application-gwt/target/kbs-frontoffice-application-gwt-1.0.0-SNAPSHOT.war"
          BACKOFFICE_ORIGIN: ${{ vars.BACKOFFICE_ORIGIN }}
          FRONTOFFICE_ORIGIN: ${{ vars.FRONTOFFICE_ORIGIN }}
          FACEBOOK_CLIENT_ID: ${{ secrets.FACEBOOK_CLIENT_ID }}
          FACEBOOK_CLIENT_SECRET: ${{ secrets.FACEBOOK_CLIENT_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
          MOJO_AUTH_API_KEY: ${{ secrets.MOJO_AUTH_API_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.KBS_REPOSITORY }}
          ECR_ACCOUNT_ID: ${{ vars.ECR_ACCOUNT_ID }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
          ECS_SERVICE: ${{ vars.ECS_SERVICE }}
          KBS_DATABASE_HOST: ${{ secrets.KBS_DATABASE_HOST }}
          KBS_DATABASE_PORT: ${{ secrets.KBS_DATABASE_PORT }}
          KBS_DATABASE_NAME: ${{ secrets.KBS_DATABASE_NAME }}
          KBS_DATABASE_USERNAME: ${{ secrets.KBS_DATABASE_USERNAME }}
          KBS_DATABASE_PASSWORD: ${{ secrets.KBS_DATABASE_PASSWORD }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_CONF_DIR: ".github/workflows/docker"
        run: |
          cp $SERVER_FAT_JAR $DOCKER_CONF_DIR
          cp $BACK_OFFICE_WAR $DOCKER_CONF_DIR
          cp $FRONT_OFFICE_WAR $DOCKER_CONF_DIR
          cd $DOCKER_CONF_DIR
          cat override@modality.base.server.datasource.properties.tpl | envsubst > override@modality.base.server.datasource.properties
          cat public-variables.properties.tpl | envsubst > public-variables.properties
          cat secret-variables.properties.tpl | envsubst > secret-variables.properties
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
          docker tag  $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          CLUSTER_STATUS=`aws ecs describe-clusters --clusters ${ECS_CLUSTER} | grep -q ACTIVE`
          aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment